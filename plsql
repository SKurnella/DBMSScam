EXP 1:
 
SET SERVEROUTPUT ON
DECLARE
A NUMBER;
B NUMBER DEFAULT 0;
C B%TYPE;
PI CONSTANT NUMBER(3,2):=3.14;
BEGIN
A:=&n;
C:=&j;
dbms_output.put_line('tHE VALUE OF A IS '||A);
DBMS_OUTPUT.PUT_LINE('tHE VALUE OF B IS '||B);
DBMS_OUTPUT.PUT_LINE('tHE VALUE OF C IS '||C);
DBMS_OUTPUT.PUT_LINE('tHE VALUE OF PI IS '||PI);
END;
/
 
OUTPUT:
The Value of a is10
The Value of b is0
The Value of c is0
The Value of pi is3.14
 
 
EXP 2:
 
set serveroutput ON
VARIABLE numb NUMBER;
DECLARE
a number;
b number default 0;
c b%TYPE;
Pi constant number(3,2):=3.14;
BEGIN
a:=&A;
c:=b;
:numb:=c;
dbms_output.put_line('The Value of a is'||a);
dbms_output.put_line('The Value of b is'||b);
dbms_output.put_line('The Value of c is'||c);
dbms_output.put_line('The Value of Constant pi is'||Pi);
dbms_output.put_line('The Value of Bind variable numb is'||:numb);
END;
/
 
OUTPUT:
Enter value for a: 20
old   7: a:=&A;
new   7: a:=20;
The Value of a is20
The Value of b is0
The Value of c is0
The Value of Constant pi is3.14
The Value of Bind variable numb is0
 
PL/SQL procedure successfully completed.
 
 
 
EXP 3(SIMPLE IF):
 
SET SERVEROUTPUT ON
DECLARE
A NUMBER;
B NUMBER;
C NUMBER;
BEGIN
A:=&A;
B:=&B;
IF A>B THEN
C:=A;
A:=B;
B:=C;
END IF;
DBMS_OUTPUT.PUT_LINE('VALUE OF A '||A);
DBMS_OUTPUT.PUT_LINE('VALUE OF B '||B);
END;
/
 
 
OUTPUT 1:
Enter value for a: 10
old   6: A:=&A;
new   6: A:=10;
Enter value for b: 15
old   7: B:=&B;
new   7: B:=15;
VALUE OF A 10
VALUE OF B 15
 
 
OUTPUT 2:
Enter value for a: 20
old   6: A:=&A;
new   6: A:=20;
Enter value for b: 10
old   7: B:=&B;
new   7: B:=10;
VALUE OF A 10
VALUE OF B 20
 
 
EXP 3(IF ELSE):
 
 
 
SET SERVEROUTPUT ON
DECLARE
A NUMBER;
B NUMBER;
BEGIN
A:=&A;
B:=&B;
IF MOD(A,2)=0 THEN
dbms_output.put_line('A  is even number');
ELSE
DBMS_OUTPUT.PUT_LINE('A IS ODD NUMBER');
END IF;
IF MOD(B,2)=0 THEN
DBMS_OUTPUT.PUT_LINE('B IS EVEN NUMBER');
ELSE
DBMS_OUTPUT.PUT_LINE('B IS ODD NUMBER');
END IF;
END;
/
 
 
 
CASE
 
SET SERVEROUTPUT ON
DECLARE
A NUMBER;
BEGIN
A :=&ENTER_VALUE_OF_A;
CASE
WHEN A>0 THEN
DBMS_OUTPUT.PUT_LINE('A IS POSITIVE');
WHEN A<0 THEN
DBMS_OUTPUT.PUT_LINE('A IS NEGATIVE');
WHEN A=0 THEN
DBMS_OUTPUT.PUT_LINE('A IS ZERO');
END CASE;
END;
/
 
FOR LOOP
 
 
 
SETSERVEROUTPUT ON
DECLARE
I NUMBER;
BEGIN
I:=&ENTER_NUMBER_OF_ITERATIONS;
FOR K IN REVERSE 1..I
LOOP
DBMS_OUTPUT.PUT_LINE(K);
END LOOP;
END;
/
 
 
WHILE LOOP
 
 
 
SET SERVEROUTPUT ON
DECLARE
I NUMBER;
K NUMBER :=0;
BEGIN
I :=&ENTER_NO_OF_ITERATIONS;
WHILE K<=I
LOOP
DBMS_OUTPUT.PUT_LINE(K);
K:=K+1;
END LOOP;
END;
/
 
 
 
 
CURSORS
 
 
SET SERVEROUTPUT ON
DECLARE
C_PNAME STUDIES.PNAME%TYPE;
C_SPLACE STUDIES.SPLACE%TYPE;
C_COURSE STUDIES.COURSE%TYPE;
C_COST STUDIES.COST%TYPE;
CURSOR C_STUDIES IS SELECT PNAME,SPLACE,COURSE,COST FROM STUDIES;
BEGIN
OPEN C_STUDIES;
LOOP
FETCH C_STUDIES INTO C_PNAME,C_SPLACE,C_COURSE,C_COST;
EXIT WHEN C_STUDIES%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(C_PNAME||'​​ '||C_SPLACE||'​​ '||C_COURSE||'​​ '||C_COST);
END LOOP;
CLOSE C_STUDIES;
END;
/
 
CURSOR PRACTICE PROGRAMS
 
1.
 
SET SERVEROUTPUT ON
DECLARE
C_PNAME STUDIES.PNAME%TYPE;
CURSOR C_STUDIES IS SELECT PNAME FROM STUDIES;
BEGIN
OPEN C_STUDIES;
LOOP
FETCH C_STUDIES INTO C_PNAME;
EXIT WHEN C_STUDIES%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(C_PNAME);
END LOOP;
CLOSE C_STUDIES;
END;
/
 
 
2.
 
SET SERVEROUTPUT ON
DECLARE
C_SPLACE STUDIES.SPLACE%TYPE;
CURSOR C_STUDIES IS SELECT SPLACE FROM STUDIES;
BEGIN
OPEN C_STUDIES;
LOOP
FETCH C_STUDIES INTO C_SPLACE;
EXIT WHEN C_STUDIES%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(C_SPLACE);
END LOOP;
CLOSE C_STUDIES;
END;
/
 
 
 
 
 
EXCEPTIONS
 
 
SET SERVEROUTPUT ON
DECLARE
A NUMBER;
B NUMBER;
BEGIN
A :=&ENTER_A;
B :=&ENTER_B;
DBMS_OUTPUT.PUT_LINE('A/B IS '||A/B);
EXCEPTION WHEN ZERO_DIVIDE THEN
DBMS_OUTPUT.PUT_LINE('CANNOT DIVIDE WITH ZERO');
END;
/
 
 
 
 
 
RECORD
 
SET SERVEROUTPUT ON
DECLARE
STUDIES_REC STUDIES%ROWTYPE;
BEGIN
SELECT * INTO STUDIES_REC FROM STUDIES WHERE PNAME='MARY';
DBMS_OUTPUT.PUT_LINE('NAME : '||STUDIES_REC.PNAME);
DBMS_OUTPUT.PUT_LINE('SPLACE : '||STUDIES_REC.SPLACE);
DBMS_OUTPUT.PUT_LINE('COURSE : '||STUDIES_REC.COURSE);
DBMS_OUTPUT.PUT_LINE('COST : '||STUDIES_REC.COST);
END;
/
 
 
PRACTICE PROGRAMS FOR RECORDS
 
1.
 
SET SERVEROUTPUT ON
DECLARE
STUDIES_REC STUDIES%ROWTYPE;
BEGIN
SELECT * INTO STUDIES_REC FROM STUDIES WHERE PNAME='VIJAYA';
DBMS_OUTPUT.PUT_LINE('NAME : '||STUDIES_REC.PNAME);
DBMS_OUTPUT.PUT_LINE('SPLACE : '||STUDIES_REC.SPLACE);
DBMS_OUTPUT.PUT_LINE('COURSE : '||STUDIES_REC.COURSE);
DBMS_OUTPUT.PUT_LINE('COST : '||STUDIES_REC.COST);
END;
/
 
VARRAY
 
SET SERVEROUTPUT ON
DECLARE
STUDIES_REC STUDIES%ROWTYPE;
BEGIN
SELECT * INTO STUDIES_REC FROM STUDIES WHERE PNAME='VIJAYA';
DBMS_OUTPUT.PUT_LINE('NAME : '||STUDIES_REC.PNAME);
DBMS_OUTPUT.PUT_LINE('SPLACE : '||STUDIES_REC.SPLACE);
DBMS_OUTPUT.PUT_LINE('COURSE : '||STUDIES_REC.COURSE);
DBMS_OUTPUT.PUT_LINE('COST : '||STUDIES_REC.COST);
END;
/
 
SET SERVEROUTPUT ON
DECLARE
TYPE NAMESARRAY IS VARRAY(3) of VARCHAR(10);
NAMES NAMESARRAY;
BEGIN
NAMES := NAMESARRAY('RAMESH','SURESH','KAMLESH');
FOR I IN 1..NAMES.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(NAMES(I));
END LOOP;
END;
/
 
 
PRACTICE PROGRAMS
 
1.
 
SET SERVEROUTPUT ON
DECLARE
TYPE NAMESARRA IS VARRAY(3) OF VARCHAR(20);
NAMES NAMESARRA;
BEGIN
NAMES:= NAMESARRA('rASHEED','HEMANTH','NAYUM');
FOR I IN 1..NAMES.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(NAMES(I));
END LOOP;
END;
/
 
2.
 
DECLARE
TYPE RASHEED IS VARRAY(10) OF INTEGER(2);
NAMES RASHEED;
BEGIN
NAMES := RASHEED(1,2,5,6,7,11,13,15,27,28);
FOR I IN 1..NAMES.COUNT
LOOP
DBMS_OUTPUT.PUT_LINE(NAMES(I));
END LOOP;
END;
/
 
 
PROCEDURES
 
 
DECLARE
A NUMBER;
B NUMBER;
C NUMBER;
PROCEDURE ADD(X IN NUMBER, Y IN NUMBER, Z OUT NUMBER) IS
BEGIN
Z:=X+Y;
END;
BEGIN
A:=10;
B:=20;
ADD(A,B,C);
DBMS_OUTPUT.PUT_LINE('ADDITION OD A AND B IS '||C);
END;
/
 
 
CREATION OF A PROCEDURE
 
CREATE OR REPLACE PROCEDURE ADDITION (X IN NUMBER, Y IN NUMBER, Z OUT NUMBER) IS
BEGIN
Z:=X+Y;
END;
/
 
 
DECLARE
A NUMBER;
B NUMBER;
C NUMBER;
BEGIN
A:=10;
B:=20;
ADDITION(A,B,C);
DBMS_OUTPUT.PUT_LINE(C);
END;
/
 
 
 
 
FUNCTIONS
 
 
 
SET SERVEROUTPUT ON
DECLARE
A NUMBER;
B NUMBER;
C NUMBER;
FUNCTION SAMPLE(X IN NUMBER,Y IN NUMBER) RETURN NUMBER IS
Z NUMBER;
BEGIN
Z:=X+Y;
RETURN Z;
END;
BEGIN
A:=10;
B:=20;
C:=SAMPLE(A,B);
DBMS_OUTPUT.PUT_LINE(C);
END;
/
 
 
 
FUNCTION DECLARATION
 
 
CREATE OR REPLACE FUNCTION ADDITION2(X IN NUMBER , Y IN NUMBER) RETURN NUMBER AS
Z NUMBER;
BEGIN
Z:=X+Y;
RETURN Z;
END;
/
